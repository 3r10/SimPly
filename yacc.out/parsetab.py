
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDleftNOTnonassocLTGTLEGEEQNEleftPLUSMINUSleftTIMESDIVIDEMODULOAND COLON COMMENT DIVIDE ELIF ELSE EQ EQUALS FALSE GE GT ID IF INTEGER_CONST LE LPAREN LT MINUS MODULO NE NEWLINE NOT OR PLUS RPAREN TAB TIMES TRUE WHILEcode : line NEWLINEcode : code line NEWLINEline : statement\n          | while\n          | if\n          | elif\n          | else\n          | commentline : TAB linestatement : ID EQUALS expressionexpression : IDexpression : INTEGER_CONSTexpression : TRUE\n                | FALSEexpression : expression PLUS expression\n                | expression MINUS expression\n                | expression TIMES expression\n                | expression DIVIDE expression\n                | expression MODULO expression\n                | expression LT expression\n                | expression GT expression\n                | expression LE expression\n                | expression GE expression\n                | expression EQ expression\n                | expression NE expression\n                | expression OR expression\n                | expression AND expressionexpression : NOT expressionexpression : LPAREN expression RPARENwhile : WHILE expression COLONif : IF expression COLONelif : ELIF expression COLONelse : ELSE COLONcomment : COMMENT'
    
_lr_action_items = {'TAB':([0,1,9,17,30,],[9,9,9,-1,-2,]),'ID':([0,1,9,11,12,13,17,19,25,26,30,33,34,35,36,37,38,39,40,41,42,43,44,45,],[10,10,10,21,21,21,-1,21,21,21,-2,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'WHILE':([0,1,9,17,30,],[11,11,11,-1,-2,]),'IF':([0,1,9,17,30,],[12,12,12,-1,-2,]),'ELIF':([0,1,9,17,30,],[13,13,13,-1,-2,]),'ELSE':([0,1,9,17,30,],[14,14,14,-1,-2,]),'COMMENT':([0,1,9,17,30,],[15,15,15,-1,-2,]),'$end':([1,17,30,],[0,-1,-2,]),'NEWLINE':([2,3,4,5,6,7,8,15,16,18,21,22,23,24,29,31,32,46,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,],[17,-3,-4,-5,-6,-7,-8,-34,30,-9,-11,-12,-13,-14,-33,-10,-30,-28,-31,-32,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-29,]),'EQUALS':([10,],[19,]),'INTEGER_CONST':([11,12,13,19,25,26,33,34,35,36,37,38,39,40,41,42,43,44,45,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'TRUE':([11,12,13,19,25,26,33,34,35,36,37,38,39,40,41,42,43,44,45,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'FALSE':([11,12,13,19,25,26,33,34,35,36,37,38,39,40,41,42,43,44,45,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'NOT':([11,12,13,19,25,26,33,34,35,36,37,38,39,40,41,42,43,44,45,],[25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'LPAREN':([11,12,13,19,25,26,33,34,35,36,37,38,39,40,41,42,43,44,45,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'COLON':([14,20,21,22,23,24,27,28,46,50,51,52,53,54,55,56,57,58,59,60,61,62,63,],[29,32,-11,-12,-13,-14,48,49,-28,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-29,]),'PLUS':([20,21,22,23,24,27,28,31,46,47,50,51,52,53,54,55,56,57,58,59,60,61,62,63,],[33,-11,-12,-13,-14,33,33,33,33,33,-15,-16,-17,-18,-19,33,33,33,33,33,33,33,33,-29,]),'MINUS':([20,21,22,23,24,27,28,31,46,47,50,51,52,53,54,55,56,57,58,59,60,61,62,63,],[34,-11,-12,-13,-14,34,34,34,34,34,-15,-16,-17,-18,-19,34,34,34,34,34,34,34,34,-29,]),'TIMES':([20,21,22,23,24,27,28,31,46,47,50,51,52,53,54,55,56,57,58,59,60,61,62,63,],[35,-11,-12,-13,-14,35,35,35,35,35,35,35,-17,-18,-19,35,35,35,35,35,35,35,35,-29,]),'DIVIDE':([20,21,22,23,24,27,28,31,46,47,50,51,52,53,54,55,56,57,58,59,60,61,62,63,],[36,-11,-12,-13,-14,36,36,36,36,36,36,36,-17,-18,-19,36,36,36,36,36,36,36,36,-29,]),'MODULO':([20,21,22,23,24,27,28,31,46,47,50,51,52,53,54,55,56,57,58,59,60,61,62,63,],[37,-11,-12,-13,-14,37,37,37,37,37,37,37,-17,-18,-19,37,37,37,37,37,37,37,37,-29,]),'LT':([20,21,22,23,24,27,28,31,46,47,50,51,52,53,54,55,56,57,58,59,60,61,62,63,],[38,-11,-12,-13,-14,38,38,38,38,38,-15,-16,-17,-18,-19,None,None,None,None,None,None,38,38,-29,]),'GT':([20,21,22,23,24,27,28,31,46,47,50,51,52,53,54,55,56,57,58,59,60,61,62,63,],[39,-11,-12,-13,-14,39,39,39,39,39,-15,-16,-17,-18,-19,None,None,None,None,None,None,39,39,-29,]),'LE':([20,21,22,23,24,27,28,31,46,47,50,51,52,53,54,55,56,57,58,59,60,61,62,63,],[40,-11,-12,-13,-14,40,40,40,40,40,-15,-16,-17,-18,-19,None,None,None,None,None,None,40,40,-29,]),'GE':([20,21,22,23,24,27,28,31,46,47,50,51,52,53,54,55,56,57,58,59,60,61,62,63,],[41,-11,-12,-13,-14,41,41,41,41,41,-15,-16,-17,-18,-19,None,None,None,None,None,None,41,41,-29,]),'EQ':([20,21,22,23,24,27,28,31,46,47,50,51,52,53,54,55,56,57,58,59,60,61,62,63,],[42,-11,-12,-13,-14,42,42,42,42,42,-15,-16,-17,-18,-19,None,None,None,None,None,None,42,42,-29,]),'NE':([20,21,22,23,24,27,28,31,46,47,50,51,52,53,54,55,56,57,58,59,60,61,62,63,],[43,-11,-12,-13,-14,43,43,43,43,43,-15,-16,-17,-18,-19,None,None,None,None,None,None,43,43,-29,]),'OR':([20,21,22,23,24,27,28,31,46,47,50,51,52,53,54,55,56,57,58,59,60,61,62,63,],[44,-11,-12,-13,-14,44,44,44,-28,44,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-29,]),'AND':([20,21,22,23,24,27,28,31,46,47,50,51,52,53,54,55,56,57,58,59,60,61,62,63,],[45,-11,-12,-13,-14,45,45,45,-28,45,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,45,-27,-29,]),'RPAREN':([21,22,23,24,46,47,50,51,52,53,54,55,56,57,58,59,60,61,62,63,],[-11,-12,-13,-14,-28,63,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-29,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'code':([0,],[1,]),'line':([0,1,9,],[2,16,18,]),'statement':([0,1,9,],[3,3,3,]),'while':([0,1,9,],[4,4,4,]),'if':([0,1,9,],[5,5,5,]),'elif':([0,1,9,],[6,6,6,]),'else':([0,1,9,],[7,7,7,]),'comment':([0,1,9,],[8,8,8,]),'expression':([11,12,13,19,25,26,33,34,35,36,37,38,39,40,41,42,43,44,45,],[20,27,28,31,46,47,50,51,52,53,54,55,56,57,58,59,60,61,62,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> code","S'",1,None,None,None),
  ('code -> line NEWLINE','code',2,'p_code_simple','simply_yacc.py',16),
  ('code -> code line NEWLINE','code',3,'p_code_multiple','simply_yacc.py',21),
  ('line -> statement','line',1,'p_line','simply_yacc.py',26),
  ('line -> while','line',1,'p_line','simply_yacc.py',27),
  ('line -> if','line',1,'p_line','simply_yacc.py',28),
  ('line -> elif','line',1,'p_line','simply_yacc.py',29),
  ('line -> else','line',1,'p_line','simply_yacc.py',30),
  ('line -> comment','line',1,'p_line','simply_yacc.py',31),
  ('line -> TAB line','line',2,'p_line_tab','simply_yacc.py',36),
  ('statement -> ID EQUALS expression','statement',3,'p_statement','simply_yacc.py',41),
  ('expression -> ID','expression',1,'p_expression_variable','simply_yacc.py',45),
  ('expression -> INTEGER_CONST','expression',1,'p_integer_constant','simply_yacc.py',49),
  ('expression -> TRUE','expression',1,'p_boolean_constant','simply_yacc.py',53),
  ('expression -> FALSE','expression',1,'p_boolean_constant','simply_yacc.py',54),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binary','simply_yacc.py',58),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binary','simply_yacc.py',59),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binary','simply_yacc.py',60),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binary','simply_yacc.py',61),
  ('expression -> expression MODULO expression','expression',3,'p_expression_binary','simply_yacc.py',62),
  ('expression -> expression LT expression','expression',3,'p_expression_binary','simply_yacc.py',63),
  ('expression -> expression GT expression','expression',3,'p_expression_binary','simply_yacc.py',64),
  ('expression -> expression LE expression','expression',3,'p_expression_binary','simply_yacc.py',65),
  ('expression -> expression GE expression','expression',3,'p_expression_binary','simply_yacc.py',66),
  ('expression -> expression EQ expression','expression',3,'p_expression_binary','simply_yacc.py',67),
  ('expression -> expression NE expression','expression',3,'p_expression_binary','simply_yacc.py',68),
  ('expression -> expression OR expression','expression',3,'p_expression_binary','simply_yacc.py',69),
  ('expression -> expression AND expression','expression',3,'p_expression_binary','simply_yacc.py',70),
  ('expression -> NOT expression','expression',2,'p_boolean_not','simply_yacc.py',74),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','simply_yacc.py',78),
  ('while -> WHILE expression COLON','while',3,'p_while','simply_yacc.py',82),
  ('if -> IF expression COLON','if',3,'p_if','simply_yacc.py',86),
  ('elif -> ELIF expression COLON','elif',3,'p_elif','simply_yacc.py',90),
  ('else -> ELSE COLON','else',2,'p_else','simply_yacc.py',94),
  ('comment -> COMMENT','comment',1,'p_comment','simply_yacc.py',98),
]
